{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["export type Flatten<T> = T extends Record<string, any> ? { [k in keyof T]: T[k] } : never\r\nexport type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never\r\nexport type Override<T, U> = Omit<T, keyof U> & U\r\nexport type Null = null | undefined\r\n\r\ntype ProvideResult<T> = T extends (...a: any) => any ? Awaited<ReturnType<T>> : never\r\nexport type FromProvider<C> = { [Property in keyof C]: ProvideResult<C[Property]> }\r\n\r\ntype VerifyParams<T> = T extends (...a: any) => any ? (...a: Parameters<T>) => boolean : never\r\nexport type AsVerifier<C> = { [Property in keyof C]: VerifyParams<C[Property]> }\r\n\r\nexport type AppInfo = {\r\n\tname?: string\r\n\tlogo?: string\r\n\tiframeParentNode?: Node\r\n}\r\n\r\nexport type ProtocolInfo = {\r\n\tprotocol?: string\r\n\tversion?: string\r\n}\r\n\r\nexport type PostMessageOptions = {\r\n\ttimeout?: number\r\n\ttransfer?: boolean\r\n}\r\n\r\nexport type Connection = {\r\n\taddress?: string\r\n\tconnect(): any\r\n\tdisconnect(): any\r\n\tpostMessage(method: string, params?: any[], options?: PostMessageOptions & ProtocolInfo): any\r\n}\r\n\r\ntype GConstructor<T = {}> = new (...args: any[]) => T\r\nexport type ConnectionConstructor = GConstructor<Connection>"]}