export declare type Flatten<T> = T extends Record<string, any> ? {
    [k in keyof T]: T[k];
} : never;
export declare type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never;
export declare type Override<T, U> = Omit<T, keyof U> & U;
export declare type Null = null | undefined;
declare type ProvideResult<T> = T extends (...a: any) => any ? Awaited<ReturnType<T>> : never;
export declare type FromProvider<C> = {
    [Property in keyof C]: ProvideResult<C[Property]>;
};
declare type VerifyParams<T> = T extends (...a: any) => any ? (...a: Parameters<T>) => boolean : never;
export declare type AsVerifier<C> = {
    [Property in keyof C]: VerifyParams<C[Property]>;
};
export declare type AppInfo = {
    name?: string;
    logo?: string;
    iframeParentNode?: Node;
};
export declare type ProtocolInfo = {
    protocol?: string;
    version?: string;
};
export declare type PostMessageOptions = {
    timeout?: number;
    transfer?: boolean;
};
export declare type Connection = {
    address?: string;
    connect(): any;
    disconnect(): any;
    postMessage(method: string, params?: any[], options?: PostMessageOptions & ProtocolInfo): any;
};
declare type GConstructor<T = {}> = new (...args: any[]) => T;
export declare type ConnectionConstructor = GConstructor<Connection>;
export {};
