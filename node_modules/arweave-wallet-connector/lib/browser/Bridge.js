import Emitter from '../utils/Emitter.js';
import { PromiseController } from '../utils/PromiseController.js';
import { is } from 'typescript-is';
const WIDTH = '400';
const HEIGHT = '600';
export default class Bridge extends Emitter {
    constructor(connectToUrl, appInfo) {
        super();
        this._iframe = {};
        this._showIframe = false;
        this._popup = {};
        this._usePopup = true;
        this._requirePopup = false;
        this._keepPopup = false;
        this._promiseController = new PromiseController();
        this._pending = [];
        this.listener = (e) => {
            var _a, _b, _c, _d, _e, _f;
            if (e.source !== this._popup.window && e.source !== ((_a = this._iframe) === null || _a === void 0 ? void 0 : _a.window)) {
                return;
            }
            if (e.origin !== ((_b = this._url) === null || _b === void 0 ? void 0 : _b.origin)) {
                return;
            }
            if (typeof e.data !== 'object') {
                return;
            }
            const { method, params, id, result, error, session } = e.data;
            console.info(`WalletConnector:${e.source === this._popup.window ? 'popup' : 'iframe'}`, e.data);
            if (id != null) {
                this._pending = this._pending.filter(x => x != id);
            }
            if (this._promiseController.processResponse(e.data)) {
                return;
            }
            if (typeof method !== 'string') {
                return;
            }
            // reserved methods
            if (method === 'ready') {
                if (e.source === this._popup.window) {
                    (_d = (_c = this._popup).resolve) === null || _d === void 0 ? void 0 : _d.call(_c);
                }
                if (e.source === this._iframe.window) {
                    (_f = (_e = this._iframe).resolve) === null || _f === void 0 ? void 0 : _f.call(_e);
                }
                return;
            }
            if (method === 'change') {
                return;
            }
            // verified methods
            if (method === 'showIframe') {
                if (typeof params !== 'boolean') {
                    return;
                }
                this.showIframe = params;
            }
            if (method === 'usePopup') {
                if (typeof params !== 'boolean') {
                    return;
                }
                this.setUsePopup(params);
            }
            if (method === 'keepPopup') {
                if (typeof params !== 'boolean') {
                    return;
                }
                this.setRequirePopup(params);
            }
            const emitting = { method, params, session };
            if (!is(emitting, object => { function _string(object) { ; if (typeof object !== "string")
                return {};
            else
                return null; } function _unknown() { return null; } function _undefined(object) { ; if (object !== undefined)
                return {};
            else
                return null; } function _number(object) { ; if (typeof object !== "number")
                return {};
            else
                return null; } function su__undefined__string__number_eu(object) { var conditions = [_undefined, _string, _number]; for (const condition of conditions) {
                var error = condition(object);
                if (!error)
                    return null;
            } return {}; } function _0(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
                return {}; {
                if ("method" in object) {
                    var error = _string(object["method"]);
                    if (error)
                        return error;
                }
                else
                    return {};
            } {
                if ("params" in object) {
                    var error = _unknown(object["params"]);
                    if (error)
                        return error;
                }
                else
                    return {};
            } {
                if ("session" in object) {
                    var error = su__undefined__string__number_eu(object["session"]);
                    if (error)
                        return error;
                }
            } return null; } return _0(object); })) {
                return console.warn('dropped');
            }
            this.emit('message', emitting);
        };
        this._iframeParentNode = appInfo === null || appInfo === void 0 ? void 0 : appInfo.iframeParentNode;
        this._url = connectToUrl;
        const urlInfo = {
            origin: window.location.origin,
            session: Math.random().toString().slice(2)
        };
        if (appInfo === null || appInfo === void 0 ? void 0 : appInfo.name) {
            urlInfo.name = appInfo.name;
        }
        if (appInfo === null || appInfo === void 0 ? void 0 : appInfo.logo) {
            urlInfo.logo = appInfo.logo;
        }
        this._url.hash = new URLSearchParams(urlInfo).toString();
        window.addEventListener('message', this.listener);
    }
    get url() { var _a; return (_a = this._url) === null || _a === void 0 ? void 0 : _a.origin; }
    get showIframe() { return this._showIframe; }
    set showIframe(value) {
        if (value === this._showIframe) {
            return;
        }
        this._showIframe = value;
        this.deliverMessage({ method: 'showIframe', params: value });
        this.emit('builtin', { showIframe: value });
        if (!this._iframeNode) {
            return;
        }
        if (!this._iframeParentNode) {
            this._iframeNode.style.opacity = value ? '1' : '0';
            this._iframeNode.style.pointerEvents = value ? '' : 'none';
            this._iframeNode.style.touchAction = value ? '' : 'none';
            this._iframeNode.style.zIndex = value ? '1000000' : '-1000000';
            this._iframeNode.style.transform = value ? '' : 'translate(0, 24px)';
            this._iframeNode.style.transition = value ? 'opacity 0.36s cubic-bezier(0.22, 1, 0.36, 1), transform 0.36s cubic-bezier(0.22, 1, 0.36, 1)' : 'opacity 0.1s ease, transform 0.1s ease, z-index 0s linear 0.1s';
        }
    }
    get usePopup() { return this._usePopup; }
    setUsePopup(value) {
        if (value === this._usePopup) {
            return;
        }
        this._usePopup = value;
        this.emit('builtin', { usePopup: value });
    }
    get requirePopup() { return this._requirePopup; }
    setRequirePopup(value) {
        if (value === this._requirePopup) {
            return;
        }
        this._requirePopup = value;
        this.emit('builtin', { requirePopup: value });
    }
    get keepPopup() { return this._keepPopup; }
    set keepPopup(value) {
        this._keepPopup = value;
        this.emit('builtin', { keepPopup: value });
        if (!value) {
            this.closePopup();
        }
        if (value) {
            this.openPopup(true);
        }
    }
    destructor(options) {
        this.closeIframe();
        this.closePopup(true);
        window.removeEventListener('message', this.listener);
    }
    postMessage(message, options) {
        const promise = this._promiseController.newMessagePromise(message, options).finally(() => this.completeRequest());
        this.deliverMessage(message);
        return promise;
    }
    openIframe() {
        if (this._iframeEl) {
            return;
        }
        this._iframeNode = document.createElement('div');
        this._iframeEl = document.createElement('iframe');
        this._iframeEl.src = this._url.toString();
        this._iframeEl.allow = 'usb; hid; bluetooth; serial; camera; payment; web-share';
        this._iframeEl.style.border = 'none';
        if (!this._iframeParentNode) {
            this._iframeEl.width = WIDTH;
            this._iframeEl.height = HEIGHT;
            this._iframeEl.style.borderRadius = '8px';
            this._iframeEl.style.maxWidth = '100%';
            this._iframeEl.style.maxHeight = '100%';
            this._iframeNode.style.position = 'fixed';
            this._iframeNode.style.inset = '0';
            this._iframeNode.style.display = 'flex';
            this._iframeNode.style.alignItems = 'center';
            this._iframeNode.style.justifyContent = 'center';
            this._iframeNode.style.background = '#00000088';
            this._iframeNode.style.opacity = '0';
            this._iframeNode.style.pointerEvents = 'none';
            this._iframeNode.style.touchAction = 'none';
            this._iframeNode.style.zIndex = '-1000000';
            this._iframeNode.style.transform = 'translate(0, 24px)';
            this._iframeNode.style.transition = 'opacity 0.1s ease, transform 0.1s ease, z-index 0s linear 0.1s';
        }
        this._iframeNode.appendChild(this._iframeEl);
        const promise = new Promise((resolve, reject) => this._iframe = { resolve, reject });
        this._iframe.promise = promise;
        const injectIframe = () => {
            var _a;
            if (this._iframeParentNode) {
                this._iframeParentNode.appendChild(this._iframeNode);
            }
            else {
                document.body.appendChild(this._iframeNode);
            }
            this._iframe.window = (_a = this._iframeEl) === null || _a === void 0 ? void 0 : _a.contentWindow;
        };
        if (document.readyState === 'complete' || document.readyState === 'interactive') {
            injectIframe();
        }
        else {
            document.addEventListener('DOMContentLoaded', injectIframe);
        }
    }
    closeIframe() {
        var _a, _b, _c, _d;
        (_a = this._iframeEl) === null || _a === void 0 ? void 0 : _a.setAttribute('src', 'about:blank');
        (_b = this._iframeNode) === null || _b === void 0 ? void 0 : _b.remove();
        this._iframeNode = undefined;
        this._iframeEl = undefined;
        (_d = (_c = this._iframe).reject) === null || _d === void 0 ? void 0 : _d.call(_c);
        this._iframe = {};
    }
    openPopup(force) {
        if (this._popup.window && !this._popup.window.closed) {
            this._popup.window.focus();
            return;
        }
        if (!this.usePopup && !force) {
            return;
        }
        window.name = 'parent';
        const popupWindow = window.open(this._url.toString(), '_blank', `location,resizable,scrollbars,width=${WIDTH},height=${HEIGHT}`);
        const promise = new Promise((resolve, reject) => this._popup = { window: popupWindow, resolve, reject });
        this._popup.promise = promise;
        const timer = setInterval(() => {
            if (this._popup.window && !this._popup.window.closed) {
                return;
            }
            if (this.keepPopup) {
                this.keepPopup = false;
            }
            clearInterval(timer);
        }, 200);
    }
    closePopup(force) {
        var _a, _b, _c;
        if (!this._popup.window || ((_a = this._popup.window) === null || _a === void 0 ? void 0 : _a.closed)) {
            return;
        }
        // todo test multiple instances behavior
        // todo if keepPopup -> might require a return back to prev page if on mobile
        if ((this.keepPopup || this.requirePopup) && !force) {
            return;
        }
        this._popup.window.location.href = 'about:blank';
        this._popup.window.close();
        (_c = (_b = this._popup).reject) === null || _c === void 0 ? void 0 : _c.call(_b);
        this._popup = {};
    }
    completeRequest() {
        setTimeout(() => {
            if (this._pending.length) {
                return;
            }
            this.closePopup();
            this.showIframe = false;
        }, 100);
    }
    deliverMessage(message, options) {
        var _a, _b;
        if (!this._url) {
            throw 'Missing URL';
        }
        console.info(`WalletConnector:post`, message);
        const fullMessage = Object.assign(Object.assign({}, message), { jsonrpc: '2.0' });
        fullMessage.id != null && this._pending.push(fullMessage.id);
        this.openIframe();
        this._iframe.promise = (_a = this._iframe.promise) === null || _a === void 0 ? void 0 : _a.then(() => { var _a; return (_a = this._iframe.window) === null || _a === void 0 ? void 0 : _a.postMessage(fullMessage, this._url.origin, (options === null || options === void 0 ? void 0 : options.transfer) ? [fullMessage] : undefined); }).catch(() => { return; });
        this.openPopup();
        this._popup.promise = (_b = this._popup.promise) === null || _b === void 0 ? void 0 : _b.then(() => { var _a; return (_a = this._popup.window) === null || _a === void 0 ? void 0 : _a.postMessage(fullMessage, this._url.origin, (options === null || options === void 0 ? void 0 : options.transfer) ? [fullMessage] : undefined); }).catch(() => { return; });
    }
}
//# sourceMappingURL=Bridge.js.map