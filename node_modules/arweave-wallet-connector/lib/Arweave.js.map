{"version":3,"file":"Arweave.js","sourceRoot":"","sources":["../src/Arweave.ts"],"names":[],"mappings":"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","sourcesContent":["import { Tag } from './utils/ArweaveTag.js'\r\nimport { is } from 'typescript-is'\r\nimport type { FromProvider, AsVerifier, Override, Null, ConnectionConstructor, PostMessageOptions } from './types'\r\nimport type Transaction from 'arweave/web/lib/transaction'\r\nimport type { TransactionInterface } from 'arweave/web/lib/transaction'\r\nimport type { ApiConfig } from 'arweave/web/lib/api'\r\n\r\n// todo find a way to verify that file name extension for import is always specified\r\n\r\ninterface SerializedTx extends Override<TransactionInterface, {\r\n\ttags: { name: string, value: string }[]\r\n\tdata: any\r\n}> {}\r\ntype DecryptOptions = AlgorithmIdentifier | Override<RsaOaepParams, { label?: string }>\r\ntype DispatchResult = {\r\n\tid?: string\r\n\ttype?: 'BASE' | 'BUNDLED'\r\n}\r\n\r\n\r\n\r\nexport interface ArweaveInterface {\r\n\tgetPublicKey(): Promise<string>\r\n\tgetArweaveConfig(): Promise<Omit<ApiConfig, 'logger'>>\r\n\tsignTransaction(tx: Transaction, options?: object | Null): Promise<Transaction>\r\n\t// signDataItem(tx: Transaction): Promise<Transaction>\r\n\t// signMessage(message: ArrayBufferView): Promise<ArrayBufferView>]\r\n\t// privateHash(message: ArrayBufferView): Promise<ArrayBufferView>\r\n\tdispatch(tx: Transaction, options?: object | Null): Promise<DispatchResult>\r\n\tdecrypt(message: ArrayBufferView, options: DecryptOptions): Promise<ArrayBufferView>\r\n}\r\nexport interface ArweaveProviderInterface extends Override<ArweaveInterface, {\r\n\tgetArweaveConfig(): Promise<Override<ApiConfig, { logger?: any }>>\r\n\tsignTransaction(tx: Partial<SerializedTx>, options?: object | Null): Promise<{\r\n\t\tid: string, owner?: string | Null, tags?: SerializedTx['tags'] | Null, signature: string, reward?: string | Null }>\r\n\tdispatch(tx: Partial<SerializedTx>, options?: object | Null): Promise<DispatchResult>\r\n}> {}\r\ninterface FromArweaveProvider extends FromProvider<ArweaveProviderInterface> {}\r\n\r\n\r\n\r\nexport function ArweaveApi<TBase extends ConnectionConstructor>(Base: TBase) {\r\n\treturn class Arweave extends Base implements ArweaveInterface {\r\n\t\tconstructor(...args: any[]) { super(...args) }\r\n\r\n\t\tnamespaces = {\r\n\t\t\tarweaveWallet: {\r\n\t\t\t\twalletName: 'ArConnect',\r\n\t\t\t\tconnect: () => this.address || this.connect(),\r\n\t\t\t\tdisconnect: () => this.disconnect(),\r\n\t\t\t\tgetActiveAddress: () => this.address,\r\n\t\t\t\tgetActivePublicKey: () => this.getPublicKey(),\r\n\t\t\t\tgetAllAddresses: () => { throw 'not implemented' },\r\n\t\t\t\tgetWalletNames: () => { throw 'not implemented' },\r\n\t\t\t\tsign: (tx: Transaction, options?: any) => this.signTransaction(tx, options),\r\n\t\t\t\tdispatch: (tx: Transaction, options?: any) => this.dispatch(tx, options),\r\n\t\t\t\tencrypt: () => { throw 'not implemented' },\r\n\t\t\t\tdecrypt: (data: Uint8Array, options: any) => this.decrypt(data, options),\r\n\t\t\t\tgetPermissions: () => [\"ACCESS_ADDRESS\", \"ACCESS_PUBLIC_KEY\", \"ACCESS_ALL_ADDRESSES\", \"SIGN_TRANSACTION\", \"ENCRYPT\", \"DECRYPT\", \"SIGNATURE\", \"ACCESS_ARWEAVE_CONFIG\", \"DISPATCH\",],\r\n\t\t\t\tgetArweaveConfig: () => this.getArweaveConfig(),\r\n\t\t\t},\r\n\t\t}\r\n\r\n\t\tpostMessage(method: string, params?: any[], options?: PostMessageOptions) {\r\n\t\t\treturn super.postMessage(method, params, { ...options, protocol: 'arweave', version: '1.0.0' })\r\n\t\t}\r\n\r\n\t\tasync getPublicKey() {\r\n\t\t\tconst res = await this.postMessage('getPublicKey')\r\n\t\t\tif (!is<FromArweaveProvider['getPublicKey']>(res)) { throw 'TypeError' }\r\n\t\t\treturn res\r\n\t\t}\r\n\r\n\t\tasync getArweaveConfig() {\r\n\t\t\tconst res = await this.postMessage('getArweaveConfig')\r\n\t\t\tif (!is<FromArweaveProvider['getArweaveConfig']>(res)) { throw 'TypeError' }\r\n\t\t\tdelete res.logger\r\n\t\t\treturn res\r\n\t\t}\r\n\r\n\t\tasync signTransaction(tx: Transaction, options?: object | Null) {\r\n\t\t\tconst { data, chunks, ...txHeader } = tx\r\n\t\t\tconst res = await this.postMessage('signTransaction', [txHeader, options])\r\n\t\t\tif (!is<FromArweaveProvider['signTransaction']>(res)) { throw 'TypeError' }\r\n\t\t\ttx.setSignature({\r\n\t\t\t\tid: res.id,\r\n\t\t\t\towner: res.owner || tx.owner,\r\n\t\t\t\ttags: res.tags?.map(tag => new Tag(tag.name, tag.value, true)),\r\n\t\t\t\tsignature: res.signature,\r\n\t\t\t\treward: res.reward || undefined\r\n\t\t\t})\r\n\t\t\treturn tx\r\n\t\t}\r\n\r\n\t\tasync dispatch(tx: Transaction, options?: object | Null) {\r\n\t\t\tconst res = await this.postMessage('dispatch', [tx, options], { transfer: true })\r\n\t\t\tif (!is<FromArweaveProvider['dispatch']>(res)) { throw 'TypeError' }\r\n\t\t\treturn res\r\n\t\t}\r\n\r\n\t\tasync decrypt<T extends ArrayBufferView>(message: T, options: DecryptOptions) {\r\n\t\t\tconst res = await this.postMessage('decrypt', [message, options])\r\n\t\t\tif (!ArrayBuffer.isView(res)) { throw 'TypeError' }\r\n\t\t\tconst constructor = message.constructor as new (p: any) => typeof message\r\n\t\t\treturn new constructor(res.buffer)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\nexport class ArweaveVerifier implements AsVerifier<ArweaveProviderInterface> {\r\n\tgetPublicKey() { return true }\r\n\tgetArweaveConfig() { return true }\r\n\tsignTransaction(tx: Partial<SerializedTx>, options?: object | Null) { return is<typeof tx>(tx) && is<typeof options>(options) }\r\n\tdispatch(tx: Partial<SerializedTx>, options?: object | Null) { return is<typeof tx>(tx) && ArrayBuffer.isView(tx.data) && is<typeof options>(options) }\r\n\tdecrypt(message: ArrayBufferView, options: DecryptOptions) { return ArrayBuffer.isView(message) && is<typeof options>(options) }\r\n}"]}