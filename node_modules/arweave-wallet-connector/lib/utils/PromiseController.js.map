{"version":3,"file":"PromiseController.js","sourceRoot":"","sources":["../../src/utils/PromiseController.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,iBAAiB;IAA9B;QACS,uBAAkB,GAGpB,EAAE,CAAA;IAmBT,CAAC;IAjBA,iBAAiB,CAAE,OAAY,EAAE,OAA4B;QAC5D,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAA;QAC3C,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC,CAAA;QACnG,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,EAAE;YAAE,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,CAAA;SAAE;QAClH,OAAO,OAAO,CAAA;IACf,CAAC;IAED,eAAe,CAAE,OAAe;QAC/B,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,OAAqC,CAAA;QACnE,IAAI,EAAE,IAAI,IAAI,EAAE;YAAE,OAAM;SAAE;QAC1B,IAAI,OAAO,EAAE,KAAK,QAAQ,IAAI,OAAO,EAAE,KAAK,QAAQ,EAAE;YAAE,MAAM,OAAO,CAAA;SAAE;QACvE,IAAI,OAAO,EAAE,KAAK,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE;YAAE,MAAM,OAAO,CAAA;SAAE;QACpE,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC,EAAE;YAAE,MAAM,wCAAwC,CAAA;SAAE;QACrF,IAAI,KAAK,IAAI,IAAI,EAAE;YAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;SAAE;aAC5D;YAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;SAAE;QACrD,OAAO,IAAI,CAAA;IACZ,CAAC;CACD","sourcesContent":["import type { PostMessageOptions } from \"../types\"\r\n\r\nexport class PromiseController {\r\n\tprivate _promiseController: {\r\n\t\tresolve: (value?: unknown) => void,\r\n\t\treject: (reason?: unknown) => void\r\n\t}[] = []\r\n\r\n\tnewMessagePromise (message: any, options?: PostMessageOptions) {\r\n\t\tmessage.id = this._promiseController.length\r\n\t\tconst promise = new Promise((resolve, reject) => this._promiseController.push({ resolve, reject }))\r\n\t\tif (options?.timeout) { setTimeout(() => this._promiseController[message.id].reject('timeout'), options.timeout) }\r\n\t\treturn promise\r\n\t}\r\n\r\n\tprocessResponse (message: object) {\r\n\t\tconst { id, result, error } = message as { [key: string]: unknown }\r\n\t\tif (id == null) { return }\r\n\t\tif (typeof id !== 'number' && typeof id !== 'string') { throw 'error' }\r\n\t\tif (typeof id === 'string' && isNaN(parseInt(id))) { throw 'error' }\r\n\t\tif (!this._promiseController[+id]) { throw 'received result to nonexistent request' }\r\n\t\tif (error != null) { this._promiseController[+id].reject(error) }\r\n\t\telse { this._promiseController[+id].resolve(result) }\r\n\t\treturn true\r\n\t}\r\n}\r\n"]}