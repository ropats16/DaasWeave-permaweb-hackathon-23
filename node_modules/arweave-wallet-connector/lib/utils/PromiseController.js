export class PromiseController {
    constructor() {
        this._promiseController = [];
    }
    newMessagePromise(message, options) {
        message.id = this._promiseController.length;
        const promise = new Promise((resolve, reject) => this._promiseController.push({ resolve, reject }));
        if (options === null || options === void 0 ? void 0 : options.timeout) {
            setTimeout(() => this._promiseController[message.id].reject('timeout'), options.timeout);
        }
        return promise;
    }
    processResponse(message) {
        const { id, result, error } = message;
        if (id == null) {
            return;
        }
        if (typeof id !== 'number' && typeof id !== 'string') {
            throw 'error';
        }
        if (typeof id === 'string' && isNaN(parseInt(id))) {
            throw 'error';
        }
        if (!this._promiseController[+id]) {
            throw 'received result to nonexistent request';
        }
        if (error != null) {
            this._promiseController[+id].reject(error);
        }
        else {
            this._promiseController[+id].resolve(result);
        }
        return true;
    }
}
//# sourceMappingURL=PromiseController.js.map