{"version":3,"file":"Inject.js","sourceRoot":"","sources":["../../src/utils/Inject.ts"],"names":[],"mappings":"AAEA,IAAI,QAAa,CAAA;AACjB,MAAM,UAAU,GAAG,EAAkB,CAAA;AACrC,MAAM,MAAM,GAAG,EAAoC,CAAA;AACnD,MAAM,KAAK,GAAG,EAA6B,CAAA;AAE3C,MAAM,UAAU,IAAI,CAAE,SAAqB;IAC1C,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE;QAAE,OAAM;KAAE;IACrC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,SAAS,CAAC,EAAE;QAAE,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;KAAE;IAC1E,MAAM,EAAE,CAAA;AACT,CAAC;AAED,MAAM,UAAU,MAAM,CAAE,SAAqB;IAC5C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,SAAS,CAAC,EAAE;QAAE,OAAO,MAAM,EAAE,CAAA;KAAE;IAC/D,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAA;IACnD,KAAK,MAAM,SAAS,IAAI,SAAS,CAAC,UAAU,EAAE;QAC7C,IAAI,MAAM,CAAC,SAAS,CAAC,KAAK,SAAS,EAAE;YAAE,SAAQ;SAAE;QACjD,MAAM,CAAC,SAAgB,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC,CAAA;QAC3C,OAAO,KAAK,CAAC,SAAS,CAAC,CAAA;QACvB,OAAO,MAAM,CAAC,SAAS,CAAC,CAAA;KACxB;IACD,MAAM,EAAE,CAAA;AACT,CAAC;AAED,SAAS,MAAM;IACd,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;QAAE,KAAK,MAAM,SAAS,IAAI,SAAS,CAAC,UAAU,EAAE;YACnF,IAAI,MAAM,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,KAAK,SAAS,EAAE;gBAAE,SAAQ;aAAE;YACtE,IAAI,MAAM,CAAC,SAAgB,CAAC,KAAK,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;gBAAE,SAAQ;aAAE;YAC9E,KAAK,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,SAAgB,CAAC,CAAA;YAC3C,MAAM,CAAC,SAAgB,CAAC,GAAG,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,CAAA;YAC1D,MAAM,CAAC,SAAS,CAAC,GAAG,SAAS,CAAA;SAC7B;KAAC;IACF,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;IAC9B,IAAI,UAAU,CAAC,MAAM,EAAE;QAAE,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,KAAK,CAAC,CAAA;KAAE;AACzE,CAAC","sourcesContent":["type Connection = { namespaces: { [namespace: string]: any } }\r\n\r\nlet interval: any\r\nconst connectors = [] as Connection[]\r\nconst loaded = {} as { [name: string]: Connection }\r\nconst swaps = {} as { [name: string]: any }\r\n\r\nexport function load (connector: Connection) {\r\n\tif (!connector.namespaces) { return }\r\n\tif (!connectors.find(c => c === connector)) { connectors.push(connector) }\r\n\tupdate()\r\n}\r\n\r\nexport function unload (connector: Connection) {\r\n\tif (!connectors.find(c => c === connector)) { return update() }\r\n\tconnectors.splice(connectors.indexOf(connector), 1)\r\n\tfor (const namespace in connector.namespaces) {\r\n\t\tif (loaded[namespace] !== connector) { continue }\r\n\t\twindow[namespace as any] = swaps[namespace]\r\n\t\tdelete swaps[namespace]\r\n\t\tdelete loaded[namespace]\r\n\t}\r\n\tupdate()\r\n}\r\n\r\nfunction update () {\r\n\tfor (const connector of connectors) { for (const namespace in connector.namespaces) {\r\n\t\tif (loaded[namespace] && loaded[namespace] !== connector) { continue }\r\n\t\tif (window[namespace as any] === connector.namespaces[namespace]) { continue }\r\n\t\tswaps[namespace] = window[namespace as any]\r\n\t\twindow[namespace as any] = connector.namespaces[namespace]\r\n\t\tloaded[namespace] = connector\r\n\t}}\r\n\twindow.clearInterval(interval)\r\n\tif (connectors.length) { interval = setInterval(() => update(), 10000) }\r\n}"]}