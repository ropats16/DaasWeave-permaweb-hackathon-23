let interval;
const connectors = [];
const loaded = {};
const swaps = {};
export function load(connector) {
    if (!connector.namespaces) {
        return;
    }
    if (!connectors.find(c => c === connector)) {
        connectors.push(connector);
    }
    update();
}
export function unload(connector) {
    if (!connectors.find(c => c === connector)) {
        return update();
    }
    connectors.splice(connectors.indexOf(connector), 1);
    for (const namespace in connector.namespaces) {
        if (loaded[namespace] !== connector) {
            continue;
        }
        window[namespace] = swaps[namespace];
        delete swaps[namespace];
        delete loaded[namespace];
    }
    update();
}
function update() {
    for (const connector of connectors) {
        for (const namespace in connector.namespaces) {
            if (loaded[namespace] && loaded[namespace] !== connector) {
                continue;
            }
            if (window[namespace] === connector.namespaces[namespace]) {
                continue;
            }
            swaps[namespace] = window[namespace];
            window[namespace] = connector.namespaces[namespace];
            loaded[namespace] = connector;
        }
    }
    window.clearInterval(interval);
    if (connectors.length) {
        interval = setInterval(() => update(), 10000);
    }
}
//# sourceMappingURL=Inject.js.map