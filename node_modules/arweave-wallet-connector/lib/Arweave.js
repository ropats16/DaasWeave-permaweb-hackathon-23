var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Tag } from './utils/ArweaveTag.js';
import { is } from 'typescript-is';
export function ArweaveApi(Base) {
    return class Arweave extends Base {
        constructor(...args) {
            super(...args);
            this.namespaces = {
                arweaveWallet: {
                    walletName: 'ArConnect',
                    connect: () => this.address || this.connect(),
                    disconnect: () => this.disconnect(),
                    getActiveAddress: () => this.address,
                    getActivePublicKey: () => this.getPublicKey(),
                    getAllAddresses: () => { throw 'not implemented'; },
                    getWalletNames: () => { throw 'not implemented'; },
                    sign: (tx, options) => this.signTransaction(tx, options),
                    dispatch: (tx, options) => this.dispatch(tx, options),
                    encrypt: () => { throw 'not implemented'; },
                    decrypt: (data, options) => this.decrypt(data, options),
                    getPermissions: () => ["ACCESS_ADDRESS", "ACCESS_PUBLIC_KEY", "ACCESS_ALL_ADDRESSES", "SIGN_TRANSACTION", "ENCRYPT", "DECRYPT", "SIGNATURE", "ACCESS_ARWEAVE_CONFIG", "DISPATCH",],
                    getArweaveConfig: () => this.getArweaveConfig(),
                },
            };
        }
        postMessage(method, params, options) {
            return super.postMessage(method, params, Object.assign(Object.assign({}, options), { protocol: 'arweave', version: '1.0.0' }));
        }
        getPublicKey() {
            return __awaiter(this, void 0, void 0, function* () {
                const res = yield this.postMessage('getPublicKey');
                if (!is(res, object => { function _string(object) { ; if (typeof object !== "string")
                    return {};
                else
                    return null; } return _string(object); })) {
                    throw 'TypeError';
                }
                return res;
            });
        }
        getArweaveConfig() {
            return __awaiter(this, void 0, void 0, function* () {
                const res = yield this.postMessage('getArweaveConfig');
                if (!is(res, object => { function _undefined(object) { ; if (object !== undefined)
                    return {};
                else
                    return null; } function _string(object) { ; if (typeof object !== "string")
                    return {};
                else
                    return null; } function _null(object) { ; if (object !== null)
                    return {};
                else
                    return null; } function su__undefined__string_eu(object) { var conditions = [_undefined, _string]; for (const condition of conditions) {
                    var error = condition(object);
                    if (!error)
                        return null;
                } return {}; } function _number(object) { ; if (typeof object !== "number")
                    return {};
                else
                    return null; } function su__undefined__string__number_eu(object) { var conditions = [_undefined, _string, _number]; for (const condition of conditions) {
                    var error = condition(object);
                    if (!error)
                        return null;
                } return {}; } function su__undefined__number_eu(object) { var conditions = [_undefined, _number]; for (const condition of conditions) {
                    var error = condition(object);
                    if (!error)
                        return null;
                } return {}; } function _false(object) { ; if (object !== false)
                    return {};
                else
                    return null; } function _true(object) { ; if (object !== true)
                    return {};
                else
                    return null; } function su__undefined__10__11_eu(object) { var conditions = [_undefined, _false, _true]; for (const condition of conditions) {
                    var error = condition(object);
                    if (!error)
                        return null;
                } return {}; } function _1(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
                    return {}; {
                    if ("protocol" in object) {
                        var error = su__undefined__string_eu(object["protocol"]);
                        if (error)
                            return error;
                    }
                } {
                    if ("host" in object) {
                        var error = su__undefined__string_eu(object["host"]);
                        if (error)
                            return error;
                    }
                } {
                    if ("port" in object) {
                        var error = su__undefined__string__number_eu(object["port"]);
                        if (error)
                            return error;
                    }
                } {
                    if ("timeout" in object) {
                        var error = su__undefined__number_eu(object["timeout"]);
                        if (error)
                            return error;
                    }
                } {
                    if ("logging" in object) {
                        var error = su__undefined__10__11_eu(object["logging"]);
                        if (error)
                            return error;
                    }
                } return null; } function _any() { return null; } function _2(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
                    return {}; {
                    if ("logger" in object) {
                        var error = _any(object["logger"]);
                        if (error)
                            return error;
                    }
                } return null; } function si__1__2_ei(object) { var conditions = [_1, _2]; for (const condition of conditions) {
                    var error = condition(object);
                    if (error)
                        return error;
                } return null; } return si__1__2_ei(object); })) {
                    throw 'TypeError';
                }
                delete res.logger;
                return res;
            });
        }
        signTransaction(tx, options) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const { data, chunks } = tx, txHeader = __rest(tx, ["data", "chunks"]);
                const res = yield this.postMessage('signTransaction', [txHeader, options]);
                if (!is(res, object => { function _string(object) { ; if (typeof object !== "string")
                    return {};
                else
                    return null; } function _undefined(object) { ; if (object !== undefined)
                    return {};
                else
                    return null; } function _null(object) { ; if (object !== null)
                    return {};
                else
                    return null; } function su__undefined__null__string_eu(object) { var conditions = [_undefined, _null, _string]; for (const condition of conditions) {
                    var error = condition(object);
                    if (!error)
                        return null;
                } return {}; } function _9(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
                    return {}; {
                    if ("name" in object) {
                        var error = _string(object["name"]);
                        if (error)
                            return error;
                    }
                    else
                        return {};
                } {
                    if ("value" in object) {
                        var error = _string(object["value"]);
                        if (error)
                            return error;
                    }
                    else
                        return {};
                } return null; } function sa__9_ea_9(object) { ; if (!Array.isArray(object))
                    return {}; for (let i = 0; i < object.length; i++) {
                    var error = _9(object[i]);
                    if (error)
                        return error;
                } return null; } function su__undefined__null_sa__9_ea_9_9_9_eu(object) { var conditions = [_undefined, _null, sa__9_ea_9]; for (const condition of conditions) {
                    var error = condition(object);
                    if (!error)
                        return null;
                } return {}; } function _0(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
                    return {}; {
                    if ("id" in object) {
                        var error = _string(object["id"]);
                        if (error)
                            return error;
                    }
                    else
                        return {};
                } {
                    if ("owner" in object) {
                        var error = su__undefined__null__string_eu(object["owner"]);
                        if (error)
                            return error;
                    }
                } {
                    if ("tags" in object) {
                        var error = su__undefined__null_sa__9_ea_9_9_9_eu(object["tags"]);
                        if (error)
                            return error;
                    }
                } {
                    if ("signature" in object) {
                        var error = _string(object["signature"]);
                        if (error)
                            return error;
                    }
                    else
                        return {};
                } {
                    if ("reward" in object) {
                        var error = su__undefined__null__string_eu(object["reward"]);
                        if (error)
                            return error;
                    }
                } return null; } return _0(object); })) {
                    throw 'TypeError';
                }
                tx.setSignature({
                    id: res.id,
                    owner: res.owner || tx.owner,
                    tags: (_a = res.tags) === null || _a === void 0 ? void 0 : _a.map(tag => new Tag(tag.name, tag.value, true)),
                    signature: res.signature,
                    reward: res.reward || undefined
                });
                return tx;
            });
        }
        dispatch(tx, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const res = yield this.postMessage('dispatch', [tx, options], { transfer: true });
                if (!is(res, object => { function _string(object) { ; if (typeof object !== "string")
                    return {};
                else
                    return null; } function _2(object) { ; if (object !== "BASE")
                    return {};
                else
                    return null; } function _3(object) { ; if (object !== "BUNDLED")
                    return {};
                else
                    return null; } function _null(object) { ; if (object !== null)
                    return {};
                else
                    return null; } function su__2__3_eu(object) { var conditions = [_2, _3]; for (const condition of conditions) {
                    var error = condition(object);
                    if (!error)
                        return null;
                } return {}; } function _0(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
                    return {}; {
                    if ("id" in object) {
                        var error = _string(object["id"]);
                        if (error)
                            return error;
                    }
                } {
                    if ("type" in object) {
                        var error = su__2__3_eu(object["type"]);
                        if (error)
                            return error;
                    }
                } return null; } return _0(object); })) {
                    throw 'TypeError';
                }
                return res;
            });
        }
        decrypt(message, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const res = yield this.postMessage('decrypt', [message, options]);
                if (!ArrayBuffer.isView(res)) {
                    throw 'TypeError';
                }
                const constructor = message.constructor;
                return new constructor(res.buffer);
            });
        }
    };
}
export class ArweaveVerifier {
    getPublicKey() { return true; }
    getArweaveConfig() { return true; }
    signTransaction(tx, options) { return is(tx, object => { function _undefined(object) { ; if (object !== undefined)
        return {};
    else
        return null; } function _number(object) { ; if (typeof object !== "number")
        return {};
    else
        return null; } function _null(object) { ; if (object !== null)
        return {};
    else
        return null; } function su__undefined__number_eu(object) { var conditions = [_undefined, _number]; for (const condition of conditions) {
        var error = condition(object);
        if (!error)
            return null;
    } return {}; } function _string(object) { ; if (typeof object !== "string")
        return {};
    else
        return null; } function su__undefined__string_eu(object) { var conditions = [_undefined, _string]; for (const condition of conditions) {
        var error = condition(object);
        if (!error)
            return null;
    } return {}; } function _10(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
        return {}; {
        if ("name" in object) {
            var error = _string(object["name"]);
            if (error)
                return error;
        }
        else
            return {};
    } {
        if ("value" in object) {
            var error = _string(object["value"]);
            if (error)
                return error;
        }
        else
            return {};
    } return null; } function sa__10_ea_10(object) { ; if (!Array.isArray(object))
        return {}; for (let i = 0; i < object.length; i++) {
        var error = _10(object[i]);
        if (error)
            return error;
    } return null; } function su__undefined_sa__10_ea_10_10_10_eu(object) { var conditions = [_undefined, sa__10_ea_10]; for (const condition of conditions) {
        var error = condition(object);
        if (!error)
            return null;
    } return {}; } function _any() { return null; } function _0(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
        return {}; {
        if ("format" in object) {
            var error = su__undefined__number_eu(object["format"]);
            if (error)
                return error;
        }
    } {
        if ("id" in object) {
            var error = su__undefined__string_eu(object["id"]);
            if (error)
                return error;
        }
    } {
        if ("last_tx" in object) {
            var error = su__undefined__string_eu(object["last_tx"]);
            if (error)
                return error;
        }
    } {
        if ("owner" in object) {
            var error = su__undefined__string_eu(object["owner"]);
            if (error)
                return error;
        }
    } {
        if ("target" in object) {
            var error = su__undefined__string_eu(object["target"]);
            if (error)
                return error;
        }
    } {
        if ("quantity" in object) {
            var error = su__undefined__string_eu(object["quantity"]);
            if (error)
                return error;
        }
    } {
        if ("data_size" in object) {
            var error = su__undefined__string_eu(object["data_size"]);
            if (error)
                return error;
        }
    } {
        if ("data_root" in object) {
            var error = su__undefined__string_eu(object["data_root"]);
            if (error)
                return error;
        }
    } {
        if ("reward" in object) {
            var error = su__undefined__string_eu(object["reward"]);
            if (error)
                return error;
        }
    } {
        if ("signature" in object) {
            var error = su__undefined__string_eu(object["signature"]);
            if (error)
                return error;
        }
    } {
        if ("tags" in object) {
            var error = su__undefined_sa__10_ea_10_10_10_eu(object["tags"]);
            if (error)
                return error;
        }
    } {
        if ("data" in object) {
            var error = _any(object["data"]);
            if (error)
                return error;
        }
    } return null; } return _0(object); }) && is(options, object => { function _undefined(object) { ; if (object !== undefined)
        return {};
    else
        return null; } function _null(object) { ; if (object !== null)
        return {};
    else
        return null; } function _object(object) { ; if (!(typeof object !== "boolean" && typeof object !== "number" && typeof object !== "string" && object !== null && object !== undefined))
        return {};
    else
        return null; } function su__undefined__null__3_eu(object) { var conditions = [_undefined, _null, _object]; for (const condition of conditions) {
        var error = condition(object);
        if (!error)
            return null;
    } return {}; } return su__undefined__null__3_eu(object); }); }
    dispatch(tx, options) { return is(tx, object => { function _undefined(object) { ; if (object !== undefined)
        return {};
    else
        return null; } function _number(object) { ; if (typeof object !== "number")
        return {};
    else
        return null; } function _null(object) { ; if (object !== null)
        return {};
    else
        return null; } function su__undefined__number_eu(object) { var conditions = [_undefined, _number]; for (const condition of conditions) {
        var error = condition(object);
        if (!error)
            return null;
    } return {}; } function _string(object) { ; if (typeof object !== "string")
        return {};
    else
        return null; } function su__undefined__string_eu(object) { var conditions = [_undefined, _string]; for (const condition of conditions) {
        var error = condition(object);
        if (!error)
            return null;
    } return {}; } function _10(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
        return {}; {
        if ("name" in object) {
            var error = _string(object["name"]);
            if (error)
                return error;
        }
        else
            return {};
    } {
        if ("value" in object) {
            var error = _string(object["value"]);
            if (error)
                return error;
        }
        else
            return {};
    } return null; } function sa__10_ea_10(object) { ; if (!Array.isArray(object))
        return {}; for (let i = 0; i < object.length; i++) {
        var error = _10(object[i]);
        if (error)
            return error;
    } return null; } function su__undefined_sa__10_ea_10_10_10_eu(object) { var conditions = [_undefined, sa__10_ea_10]; for (const condition of conditions) {
        var error = condition(object);
        if (!error)
            return null;
    } return {}; } function _any() { return null; } function _0(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
        return {}; {
        if ("format" in object) {
            var error = su__undefined__number_eu(object["format"]);
            if (error)
                return error;
        }
    } {
        if ("id" in object) {
            var error = su__undefined__string_eu(object["id"]);
            if (error)
                return error;
        }
    } {
        if ("last_tx" in object) {
            var error = su__undefined__string_eu(object["last_tx"]);
            if (error)
                return error;
        }
    } {
        if ("owner" in object) {
            var error = su__undefined__string_eu(object["owner"]);
            if (error)
                return error;
        }
    } {
        if ("target" in object) {
            var error = su__undefined__string_eu(object["target"]);
            if (error)
                return error;
        }
    } {
        if ("quantity" in object) {
            var error = su__undefined__string_eu(object["quantity"]);
            if (error)
                return error;
        }
    } {
        if ("data_size" in object) {
            var error = su__undefined__string_eu(object["data_size"]);
            if (error)
                return error;
        }
    } {
        if ("data_root" in object) {
            var error = su__undefined__string_eu(object["data_root"]);
            if (error)
                return error;
        }
    } {
        if ("reward" in object) {
            var error = su__undefined__string_eu(object["reward"]);
            if (error)
                return error;
        }
    } {
        if ("signature" in object) {
            var error = su__undefined__string_eu(object["signature"]);
            if (error)
                return error;
        }
    } {
        if ("tags" in object) {
            var error = su__undefined_sa__10_ea_10_10_10_eu(object["tags"]);
            if (error)
                return error;
        }
    } {
        if ("data" in object) {
            var error = _any(object["data"]);
            if (error)
                return error;
        }
    } return null; } return _0(object); }) && ArrayBuffer.isView(tx.data) && is(options, object => { function _undefined(object) { ; if (object !== undefined)
        return {};
    else
        return null; } function _null(object) { ; if (object !== null)
        return {};
    else
        return null; } function _object(object) { ; if (!(typeof object !== "boolean" && typeof object !== "number" && typeof object !== "string" && object !== null && object !== undefined))
        return {};
    else
        return null; } function su__undefined__null__3_eu(object) { var conditions = [_undefined, _null, _object]; for (const condition of conditions) {
        var error = condition(object);
        if (!error)
            return null;
    } return {}; } return su__undefined__null__3_eu(object); }); }
    decrypt(message, options) { return ArrayBuffer.isView(message) && is(options, object => { function _string(object) { ; if (typeof object !== "string")
        return {};
    else
        return null; } function _2(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
        return {}; {
        if ("name" in object) {
            var error = _string(object["name"]);
            if (error)
                return error;
        }
        else
            return {};
    } return null; } function _4(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
        return {}; {
        if ("name" in object) {
            var error = _string(object["name"]);
            if (error)
                return error;
        }
        else
            return {};
    } return null; } function _5(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
        return {}; {
        if ("label" in object) {
            var error = _string(object["label"]);
            if (error)
                return error;
        }
    } return null; } function si__4__5_ei(object) { var conditions = [_4, _5]; for (const condition of conditions) {
        var error = condition(object);
        if (error)
            return error;
    } return null; } function su__string__2_si__4__5_ei_eu(object) { var conditions = [_string, _2, si__4__5_ei]; for (const condition of conditions) {
        var error = condition(object);
        if (!error)
            return null;
    } return {}; } return su__string__2_si__4__5_ei_eu(object); }); }
}
//# sourceMappingURL=Arweave.js.map